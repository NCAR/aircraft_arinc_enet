/******************************************************************************
 * FILE:			ADT_L0.h
 *
 * Copyright (c) 2007-2016, Alta Data Technologies LLC (ADT), All Rights Reserved.
 * Use of this software is subject to the ADT Software License (latest
 * revision), US Government or local laws and the ADT Terms and Conditions
 * of Sale (latest revision).
 *
 * DESCRIPTION:
 *	Header file for Layer 0 API.
 *
 *	This file should not contain platform/OS specifics.  All specifics should
 *	be in the Layer 0 "C" file(s).
 *
 *****************************************************************************/
/*! \file ADT_L0.h
 *  \brief Top-level header file for the ADT Layer 0 API
 *
 *  This is the header file for the ADT Layer 0 API, with definitions of
 *  constants, types, and function prototypes.
 */
#ifndef _ADT_L0_Header_
#define _ADT_L0_Header_

#ifdef __cplusplus
extern "C" {
#endif

/* Need the following includes for functions that use memset.
   For Windows (MSVS), Linux, and RTX include string.h, memory.h, and malloc.h.
   For INTEGRITY or VxWorks 5.5 include string.h and stdlib.h.
   For NI-VISA LabVIEW Real-Time (built with LabWindows/CVI) include string.h and ansi_c.h
*/
#include <string.h>
/* #include <stdlib.h> */
#include <malloc.h> 
#include <memory.h> 
/* #include <ansi_c.h> */


/********** Version Constant **********/
#define ADT_L0_API_VERSION	0x03030000  /* Version 3.3.0.0 */

/********** Type Definitions **********/
/*! \brief Basic 32-bit unsigned integer type */
typedef unsigned int  ADT_L0_UINT32;

/*! \brief Basic 16-bit unsigned integer type */
typedef unsigned short  ADT_L0_UINT16;

/*! \brief Basic 8-bit unsigned integer type */
typedef unsigned char  ADT_L0_UINT8;

/* Internal type used for ENET ADCP UDP packet payload */
typedef struct adt_l0_adcp_udppayload {
	ADT_L0_UINT32 mode;
	ADT_L0_UINT32 sequence_number;
	ADT_L0_UINT32 server_status_word;
	ADT_L0_UINT32 altastring;
	ADT_L0_UINT32 reserved_1;
	ADT_L0_UINT32 device_mem_addr;
	ADT_L0_UINT32 transfer_count;
	ADT_L0_UINT32 payload_size;
	ADT_L0_UINT32 payload[360];
} ADT_L0_ADCP_UDPPAYLOAD;

/* Calling convention:
 *		__stdcall for Windows, NI-VISA
 *		<nothing> for Linux, VxWorks, Integrity
 */
#define ADT_L0_CALL_CONV	/*!< \brief Function calling convention */

/*! \brief Function pointer typedef for user interrupt handler */
typedef void (ADT_L0_CALL_CONV *ADT_L0_PUSERISR)(void *);

/********** Expected sizes of data types/structures **********/
#define ADT_L0_UINT32_SIZE		4	/*!< \brief Expected size for \ref ADT_L0_UINT32 type */

/********** Constants **********/
#define	ADT_L0_API_DEVICEINIT_NOKP		0x00000004

/* PCI Vendor and Device IDs */
#define ADT_PCI_VENDOR_ID				0xAD00

#define ADT_PCI_DEVICE_ID_TEST1553		0x0001
#define ADT_PCI_DEVICE_ID_PMC1553		0x0010
#define ADT_PCI_DEVICE_ID_PC104P1553	0x0012
#define ADT_PCI_DEVICE_ID_PCI1553		0x0014
#define ADT_PCI_DEVICE_ID_PCCD1553		0x0016
#define ADT_PCI_DEVICE_ID_PCI104E1553	0x0018
#define ADT_PCI_DEVICE_ID_XMC1553		0x001A
#define ADT_PCI_DEVICE_ID_ECD54_1553	0x001C
#define ADT_PCI_DEVICE_ID_PCIE4L1553	0x001E
#define ADT_PCI_DEVICE_ID_PCIE1L1553	0x0020
#define ADT_PCI_DEVICE_ID_MPCIE1553		0x0022
#define ADT_PCI_DEVICE_ID_XMCMW			0x0024
#define ADT_PCI_DEVICE_ID_MPCIE21553	0x0026

#define ADT_PCI_DEVICE_ID_TESTA429		0x0014  /* TEST-A429 uses PCI-1553 board with ARINC bit file */
#define ADT_PCI_DEVICE_ID_PMCA429		0x0110
#define ADT_PCI_DEVICE_ID_PC104PA429	0x0112
#define ADT_PCI_DEVICE_ID_PCIA429		0x0114
#define ADT_PCI_DEVICE_ID_PCCDA429		0x0116
#define ADT_PCI_DEVICE_ID_PCI104EA429	0x0118
#define ADT_PCI_DEVICE_ID_XMCA429		0x011A
#define ADT_PCI_DEVICE_ID_ECD54_A429	0x011C
#define ADT_PCI_DEVICE_ID_PCIE4LA429	0x011E
#define ADT_PCI_DEVICE_ID_PCIE1LA429    0x0120
#define ADT_PCI_DEVICE_ID_MPCIEA429     0x0122
#define ADT_PCI_DEVICE_ID_PC104PA429LTV 0x0124
#define ADT_PCI_DEVICE_ID_PMCA429HD		0x0126
 
#define ADT_PCI_DEVICE_ID_PMCMA4		0x0210
#define ADT_PCI_DEVICE_ID_PC104PMA4		0x0212
#define ADT_PCI_DEVICE_ID_PC104EMA4		0x0214
#define ADT_PCI_DEVICE_ID_TBOLTMA4		0x0216
#define ADT_PCI_DEVICE_ID_XMCMA4		0x021A

#define ADT_PCI_DEVICE_ID_PMCWMUX		0x0310


/* Device ID Constants - Backplane Type (4 bits) -	(DEVID & 0xF0000000) */
#define ADT_DEVID_BACKPLANETYPE_SIMULATED	0x00000000
#define ADT_DEVID_BACKPLANETYPE_PCI			0x10000000
#define ADT_DEVID_BACKPLANETYPE_ENET		0x20000000

/* Device ID Constants - Board Type (8 bits) -		(DEVID & 0x0FF00000) */
#define ADT_DEVID_BOARDTYPE_SIM1553			0x00000000
#define ADT_DEVID_BOARDTYPE_TEST1553		0x00100000
#define ADT_DEVID_BOARDTYPE_PMC1553			0x00200000
#define ADT_DEVID_BOARDTYPE_PC104P1553		0x00300000
#define ADT_DEVID_BOARDTYPE_PCI1553			0x00400000
#define ADT_DEVID_BOARDTYPE_PCCD1553		0x00500000
#define ADT_DEVID_BOARDTYPE_PCI104E1553		0x00600000
#define ADT_DEVID_BOARDTYPE_XMC1553			0x00700000
#define ADT_DEVID_BOARDTYPE_ECD54_1553		0x00800000
#define ADT_DEVID_BOARDTYPE_PCIE4L1553		0x00900000
#define ADT_DEVID_BOARDTYPE_PCIE1L1553		0x00A00000
#define ADT_DEVID_BOARDTYPE_MPCIE1553		0x00B00000
#define ADT_DEVID_BOARDTYPE_XMCMW			0x00C00000
#define ADT_DEVID_BOARDTYPE_MPCIE21553		0x00D00000

#define ADT_DEVID_BOARDTYPE_SIMA429			0x01000000
#define ADT_DEVID_BOARDTYPE_TESTA429		0x01100000
#define ADT_DEVID_BOARDTYPE_PMCA429			0x01200000
#define ADT_DEVID_BOARDTYPE_PC104PA429		0x01300000
#define ADT_DEVID_BOARDTYPE_PCIA429			0x01400000
#define ADT_DEVID_BOARDTYPE_PCCDA429		0x01500000
#define ADT_DEVID_BOARDTYPE_PCI104EA429		0x01600000
#define ADT_DEVID_BOARDTYPE_XMCA429			0x01700000
#define ADT_DEVID_BOARDTYPE_ECD54_A429		0x01800000
#define ADT_DEVID_BOARDTYPE_PCIE4LA429		0x01900000
#define ADT_DEVID_BOARDTYPE_PCIE1LA429		0x01A00000
#define ADT_DEVID_BOARDTYPE_MPCIEA429		0x01B00000
#define ADT_DEVID_BOARDTYPE_PC104PA429LTV	0x01C00000
#define ADT_DEVID_BOARDTYPE_PMCA429HD		0x01D00000

#define ADT_DEVID_BOARDTYPE_PMCMA4			0x02200000
#define ADT_DEVID_BOARDTYPE_PC104PMA4		0x02300000
#define ADT_DEVID_BOARDTYPE_PC104EMA4		0x02600000
#define ADT_DEVID_BOARDTYPE_XMCMA4			0x02700000
#define ADT_DEVID_BOARDTYPE_TBOLTMA4		0x02800000

#define ADT_DEVID_BOARDTYPE_ENET1553		0x03100000 
#define ADT_DEVID_BOARDTYPE_PMCE1553		0x03200000 
#define ADT_DEVID_BOARDTYPE_ENETA429		0x03300000 
#define ADT_DEVID_BOARDTYPE_ENET1A1553		0x03400000
#define ADT_DEVID_BOARDTYPE_ENET485			0x03500000
#define ADT_DEVID_BOARDTYPE_ENET1553EBR		ADT_DEVID_BOARDTYPE_ENET485
#define ADT_DEVID_BOARDTYPE_ENET2_1553		0x03600000
#define ADT_DEVID_BOARDTYPE_ENET_MA4		0x03700000
#define ADT_DEVID_BOARDTYPE_ENETX_MA4		0x03800000
#define ADT_DEVID_BOARDTYPE_ENETA429P		0x03900000 

#define ADT_DEVID_BOARDTYPE_PMCWMUX			0x04200000


/* Device ID Constants - Product (backplane | board type)
 * For defining DEVID in user applications.
 */
#define ADT_PRODUCT_SIM1553		ADT_DEVID_BACKPLANETYPE_SIMULATED | ADT_DEVID_BOARDTYPE_SIM1553
#define ADT_PRODUCT_TEST1553	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_TEST1553
#define ADT_PRODUCT_PMC1553		ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PMC1553
#define ADT_PRODUCT_PC104P1553	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PC104P1553
#define ADT_PRODUCT_PCI1553		ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PCI1553
#define ADT_PRODUCT_PCCD1553	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PCCD1553
#define ADT_PRODUCT_PCI104E1553	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PCI104E1553
#define ADT_PRODUCT_XMC1553		ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_XMC1553
#define ADT_PRODUCT_ECD54_1553	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_ECD54_1553
#define ADT_PRODUCT_PCIE4L1553	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PCIE4L1553
#define ADT_PRODUCT_PCIE1L1553	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PCIE1L1553
#define ADT_PRODUCT_MPCIE1553	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_MPCIE1553
#define ADT_PRODUCT_XMCMW		ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_XMCMW
#define ADT_PRODUCT_MPCIE21553	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_MPCIE21553

#define ADT_PRODUCT_SIMA429		ADT_DEVID_BACKPLANETYPE_SIMULATED | ADT_DEVID_BOARDTYPE_SIMA429
#define ADT_PRODUCT_TESTA429	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_TESTA429
#define ADT_PRODUCT_PMCA429		ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PMCA429
#define ADT_PRODUCT_PC104PA429	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PC104PA429
#define ADT_PRODUCT_PCIA429		ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PCIA429
#define ADT_PRODUCT_PCCDA429	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PCCDA429
#define ADT_PRODUCT_PCI104EA429	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PCI104EA429
#define ADT_PRODUCT_XMCA429		ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_XMCA429
#define ADT_PRODUCT_ECD54_A429	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_ECD54_A429
#define ADT_PRODUCT_PCIE4LA429	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PCIE4LA429
#define ADT_PRODUCT_PCIE1LA429	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PCIE1LA429
#define ADT_PRODUCT_MPCIEA429	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_MPCIEA429
#define ADT_PRODUCT_PC104PA429LTV	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PC104PA429LTV
#define ADT_PRODUCT_PMCA429HD	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PMCA429HD

#define ADT_PRODUCT_PMCMA4		ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PMCMA4
#define ADT_PRODUCT_PC104PMA4	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PC104PMA4
#define ADT_PRODUCT_PC104EMA4	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PC104EMA4
#define ADT_PRODUCT_TBOLTMA4	ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_TBOLTMA4
#define ADT_PRODUCT_XMCMA4		ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_XMCMA4

#define ADT_PRODUCT_ENET1553	ADT_DEVID_BACKPLANETYPE_ENET | ADT_DEVID_BOARDTYPE_ENET1553
#define ADT_PRODUCT_PMCE1553	ADT_DEVID_BACKPLANETYPE_ENET | ADT_DEVID_BOARDTYPE_PMCE1553
#define ADT_PRODUCT_ENETA429	ADT_DEVID_BACKPLANETYPE_ENET | ADT_DEVID_BOARDTYPE_ENETA429
#define ADT_PRODUCT_ENETA429P	ADT_DEVID_BACKPLANETYPE_ENET | ADT_DEVID_BOARDTYPE_ENETA429P
#define ADT_PRODUCT_ENET1A1553	ADT_DEVID_BACKPLANETYPE_ENET | ADT_DEVID_BOARDTYPE_ENET1A1553
#define ADT_PRODUCT_ENET485		ADT_DEVID_BACKPLANETYPE_ENET | ADT_DEVID_BOARDTYPE_ENET485
#define ADT_PRODUCT_ENET1553EBR ADT_PRODUCT_ENET485
#define ADT_PRODUCT_ENET2_1553	ADT_DEVID_BACKPLANETYPE_ENET | ADT_DEVID_BOARDTYPE_ENET2_1553
#define ADT_PRODUCT_ENET_MA4	ADT_DEVID_BACKPLANETYPE_ENET | ADT_DEVID_BOARDTYPE_ENET_MA4
#define ADT_PRODUCT_ENETX_MA4	ADT_DEVID_BACKPLANETYPE_ENET | ADT_DEVID_BOARDTYPE_ENETX_MA4

#define ADT_PRODUCT_PMCWMUX		ADT_DEVID_BACKPLANETYPE_PCI | ADT_DEVID_BOARDTYPE_PMCWMUX


/* Device ID Constants - Board Number (4 bits) -	(DEVID & 0x000F0000) */
#define ADT_DEVID_BOARDNUM_01				0x00000000
#define ADT_DEVID_BOARDNUM_02				0x00010000
#define ADT_DEVID_BOARDNUM_03				0x00020000
#define ADT_DEVID_BOARDNUM_04				0x00030000
#define ADT_DEVID_BOARDNUM_05				0x00040000
#define ADT_DEVID_BOARDNUM_06				0x00050000
#define ADT_DEVID_BOARDNUM_07				0x00060000
#define ADT_DEVID_BOARDNUM_08				0x00070000
#define ADT_DEVID_BOARDNUM_09				0x00080000
#define ADT_DEVID_BOARDNUM_10				0x00090000
#define ADT_DEVID_BOARDNUM_11				0x000A0000
#define ADT_DEVID_BOARDNUM_12				0x000B0000
#define ADT_DEVID_BOARDNUM_13				0x000C0000
#define ADT_DEVID_BOARDNUM_14				0x000D0000
#define ADT_DEVID_BOARDNUM_15				0x000E0000
#define ADT_DEVID_BOARDNUM_16				0x000F0000

/* Device ID Constants - Channel Type (8 bits) -	(DEVID & 0x0000FF00) */
#define ADT_DEVID_CHANNELTYPE_GLOBALS		0x00000100
#define ADT_DEVID_CHANNELTYPE_1553			0x00001000
#define ADT_DEVID_CHANNELTYPE_A429			0x00002000
#define ADT_DEVID_CHANNELTYPE_WMUX			0x00003000

/* Device ID Constants - Channel Number (8 bits) -	(DEVID & 0x000000FF) */
#define ADT_DEVID_CHANNELNUM_01				0x00000000
#define ADT_DEVID_CHANNELNUM_02				0x00000001
#define ADT_DEVID_CHANNELNUM_03				0x00000002
#define ADT_DEVID_CHANNELNUM_04				0x00000003
#define ADT_DEVID_CHANNELNUM_05				0x00000004
#define ADT_DEVID_CHANNELNUM_06				0x00000005
#define ADT_DEVID_CHANNELNUM_07				0x00000006
#define ADT_DEVID_CHANNELNUM_08				0x00000007
#define ADT_DEVID_CHANNELNUM_09				0x00000008
#define ADT_DEVID_CHANNELNUM_10				0x00000009
#define ADT_DEVID_CHANNELNUM_11				0x0000000A
#define ADT_DEVID_CHANNELNUM_12				0x0000000B
#define ADT_DEVID_CHANNELNUM_13				0x0000000C
#define ADT_DEVID_CHANNELNUM_14				0x0000000D
#define ADT_DEVID_CHANNELNUM_15				0x0000000E
#define ADT_DEVID_CHANNELNUM_16				0x0000000F

/* Device ID Constants \96 ARINC Bank Number (8 bits) - (DEVID & 0x000000FF) */
#define ADT_DEVID_BANK_01					0x00000000
#define ADT_DEVID_BANK_02					0x00000001
#define ADT_DEVID_BANK_03					0x00000002
#define ADT_DEVID_BANK_04					0x00000003

/* Memory sizes by board type and channel type for SIMULATED devices */
#define ADT_MEMSIZE_SIM1553_CHAN			0x100000	/* 1MB for a SIM1553 channel */
#define ADT_MEMSIZE_SIMA429_CHAN			0x100000	/* 1MB for a SIMA429 channel */

/* Layer 0 Error Codes (1 to 999) */
#define ADT_SUCCESS						0		/*!< \brief Function call completed without error. */
#define ADT_FAILURE						1		/*!< \brief Function call completed with error. */
#define ADT_ERR_MEM_MAP_SIZE			2		/*!< \brief Invalid memory map size. */
#define ADT_ERR_NO_DEVICE				3		/*!< \brief Device not found */
#define ADT_ERR_CANT_OPEN_DEV			4		/*!< \brief Can't open device */
#define ADT_ERR_DEV_NOT_INITED			5		/*!< \brief Device not initialized */
#define ADT_ERR_DEV_ALREADY_OPEN		6		/*!< \brief Device already open */
#define ADT_ERR_UNSUPPORTED_BACKPLANE	7		/*!< \brief Unsupported backplane in DevID */
#define ADT_ERR_UNSUPPORTED_BOARDTYPE	8		/*!< \brief Unsupported board type in DevID */
#define ADT_ERR_UNSUPPORTED_CHANNELTYPE 9		/*!< \brief Unsupported channel type in DevID */
#define ADT_ERR_CANT_OPEN_DRIVER		10		/*!< \brief Can't open driver */
#define ADT_ERR_CANT_SET_DRV_OPTIONS	11		/*!< \brief Can't set driver options */
#define ADT_ERR_CANT_GET_DEV_INFO		12		/*!< \brief Can't get device info */
#define ADT_ERR_INVALID_BOARD_NUM		13		/*!< \brief Invalid board number */
#define ADT_ERR_INVALID_CHANNEL_NUM		14		/*!< \brief Invalid channel number */
#define ADT_ERR_DRIVER_READ_FAIL		15		/*!< \brief Driver read memory failure */
#define ADT_ERR_DRIVER_WRITE_FAIL		16		/*!< \brief Driver write memory failure */
#define ADT_ERR_DEVICE_CLOSE_FAIL		17		/*!< \brief Device close failure */
#define ADT_ERR_DRIVER_CLOSE_FAIL		18		/*!< \brief Driver close failure */
#define ADT_ERR_KP_OPEN_FAIL     		19		/*!< \brief Kernel Plug-In Open failure */
#define ADT_ERR_ENET_NO_PORT_AVAILABLE 100		/*!< \brief No UDP port available */
#define ADT_ERR_ENET_READ_FAIL		   101		/*!< \brief ENET Read failure */
#define ADT_ERR_ENET_WRITE_FAIL		   102		/*!< \brief ENET Write failure */
#define ADT_ERR_ENET_NOTRUNNING		   103      /*!< \brief ENET Sockets not running */
#define ADT_ERR_ENET_INVALID_SIZE	   104		/*!< \brief ENET Invalid payload size */
#define ADT_ERR_ENET_SENDFAIL		   105		/*!< \brief ENET Send failure */
#define ADT_ERR_ENET_SELECTFAIL		   106		/*!< \brief ENET Select failure */
#define ADT_ERR_ENET_SELECTTIMEOUT	   107		/*!< \brief ENET Select timeout */
#define ADT_ERR_ENET_BADSEQNUM		   108		/*!< \brief ENET Bad sequence number */
#define ADT_ERR_ENET_SRVSTSFAIL		   109		/*!< \brief ENET Server Status Code indicate FAILURE */
#define ADT_ERR_ENET_BADPRODUCTID	   110      /*!< \brief ENET Bad Product ID */
#define ADT_ERR_CACHEDMAFAIL           111      /*!< \brief DMA Cache Malloc Fail */

/********** ENET Device Constants *****************/
#define ADT_L0_ENET_ADCP_SERVER_PORT		55512
#define ADT_L0_ENET_ADCP_CLIENT_PORT_START	55513
#define ADT_L0_ENET_ADCP_CLIENT_PORT_END	56511

#define ADT_L0_ENET_ADCP_TIMEOUT_MS		50
#define ADT_L0_ENET_ADCP_MAXNUMRETRY	10

#define ADT_L0_ENET_ADCP_UDPPAYLOAD_MAXSZ	1472  /* Was 472 (prior to v2.5.6.6) */
#define ADT_L0_ENET_ADCP_ADCPPAYLOAD_MAXSZ	1440  /* Was 440 (prior to v2.5.6.6) */

#define ADT_L0_ENET_ADCP_HDR_MODE		0x0000
#define ADT_L0_ENET_ADCP_HDR_MODE_RD_MM_32	0x00000001
#define ADT_L0_ENET_ADCP_HDR_MODE_RD_MM_16	0x00000002
#define ADT_L0_ENET_ADCP_HDR_MODE_RD_SM_32	0x00000004
#define ADT_L0_ENET_ADCP_HDR_MODE_WR_MM_32	0x00010000
#define ADT_L0_ENET_ADCP_HDR_MODE_WR_MM_16	0x00020000
#define ADT_L0_ENET_ADCP_HDR_MODE_WR_SM_32	0x00040000
#define ADT_L0_ENET_ADCP_HDR_MODE_RESETDEV	0x80000000
#define ADT_L0_ENET_ADCP_HDR_SEQNUM		0x0004
#define ADT_L0_ENET_ADCP_HDR_SRVSTS		0x0008
#define ADT_L0_ENET_ADCP_HDR_SRVSTS_CODE	0x0000FFFF
#define ADT_L0_ENET_ADCP_HDR_SRVSTS_SUCCESS 0x00000000
#define ADT_L0_ENET_ADCP_HDR_ALTASTRING	0x000C
#define ADT_L0_ENET_ADCP_HDR_ALTASTRING_VAL 0x414C5441  /* Big endian 0x414C5441, ASCII "ALTA" */
#define ADT_L0_ENET_ADCP_HDR_RSVD1		0x0010
#define ADT_L0_ENET_ADCP_HDR_DEVMEMADDR	0x0014
#define ADT_L0_ENET_ADCP_HDR_XFERCOUNT	0x0018
#define ADT_L0_ENET_ADCP_HDR_PAYLOADSZ	0x001C
#define ADT_L0_ENET_ADCP_PAYLOAD		0x0020

/********** Exported Function Prototypes **********/
extern void ADT_L0_CALL_CONV ADT_L0_msSleep(ADT_L0_UINT32 msDelay);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_MapMemory(ADT_L0_UINT32 devID, ADT_L0_UINT32 startupOptions, ADT_L0_UINT32 ClientIpAddress, ADT_L0_UINT32 ServerIpAddress);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_MapMemory_pciInfo(ADT_L0_UINT32 devID, ADT_L0_UINT32 startupOptions, ADT_L0_UINT32 *pciBus, ADT_L0_UINT32 *pciDevice, ADT_L0_UINT32 *pciFunc);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_UnmapMemory(ADT_L0_UINT32 devID);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_ReadMem32(ADT_L0_UINT32 devID, ADT_L0_UINT32 offset, ADT_L0_UINT32 *data, ADT_L0_UINT32 count);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_ReadMem32DMA(ADT_L0_UINT32 devID, ADT_L0_UINT32 offset, ADT_L0_UINT32 *data, ADT_L0_UINT32 count);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_WriteMem32(ADT_L0_UINT32 devID, ADT_L0_UINT32 offset, ADT_L0_UINT32 *data, ADT_L0_UINT32 count);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_ReadSetupMem32(ADT_L0_UINT32 devID, ADT_L0_UINT32 offset, ADT_L0_UINT32 *data, ADT_L0_UINT32 count);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_WriteSetupMem32(ADT_L0_UINT32 devID, ADT_L0_UINT32 offset, ADT_L0_UINT32 *data, ADT_L0_UINT32 count);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_ReadMem16(ADT_L0_UINT32 devID, ADT_L0_UINT32 offset, ADT_L0_UINT16 *data, ADT_L0_UINT32 count);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_WriteMem16(ADT_L0_UINT32 devID, ADT_L0_UINT32 offset, ADT_L0_UINT16 *data, ADT_L0_UINT32 count);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_AttachIntHandler(ADT_L0_UINT32 devID, ADT_L0_UINT32 chanRegOffset, ADT_L0_PUSERISR, void * pUserData);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_DetachIntHandler(ADT_L0_UINT32 devID);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_ENET_ADCP_Reset(ADT_L0_UINT32 devID);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_ENET_ADCP_GetStatistics(ADT_L0_UINT32 devID, ADT_L0_UINT32 *pPortNum, ADT_L0_UINT32 *pTransactions, ADT_L0_UINT32 *pRetries, ADT_L0_UINT32 *pFailures);
extern ADT_L0_UINT32 ADT_L0_CALL_CONV ADT_L0_ENET_ADCP_ClearStatistics(ADT_L0_UINT32 devID);


#ifdef __cplusplus
}
#endif

#endif

